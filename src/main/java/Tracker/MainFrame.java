package Tracker;


import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

/*
 * class: MainFrame version: 2.3
 * date modified: 12/16/19
 * The purpose of this program is to provide a GUI and executable for the 
 * Initiative Tracker.
 * created by: Charles Hamilton
 */

public class MainFrame extends javax.swing.JFrame {
    static String filePath = "";
    static String charFile = "";
    static String monFile = "";
    static String comFile = "";
    static String phDexString = "";
    static int phDex = 0;
    static String phInitString = "";
    static int phInit = 0;
    static int initialized = 0;
    static String phName = "";
    static String phType = "";
    static boolean combatInit = false;
    static boolean clicked = false;
    static boolean newAdded = false;
    static int blank = 0;
    static ArrayList<String> names = new ArrayList<String>();
    static ArrayList<Integer> inits = new ArrayList<Integer>();
    static Combatant old = new Combatant(1,"","",1);
    private final static String newline = "\n";
    static int i = 0;
    static int j = 0;
    static int k = 0;
    static int newlyAdded = -1;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH);
        //CENTERING THE SCREEN
        Toolkit tool = Toolkit.getDefaultToolkit();
        Dimension dim = new Dimension(tool.getScreenSize());
        int height = (int) dim.getHeight();
        int width = (int) dim.getWidth();
        setSize(width, height);
        setLocation(width / 2 - getWidth() / 2, height / 2 - getHeight() / 2);
    }
    public static boolean isNumeric(String strNum) {
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException | NullPointerException nfe) {
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        outputPanel = new javax.swing.JPanel();
        filePathPanel = new javax.swing.JPanel();
        filePathLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        filePathText = new javax.swing.JTextField();
        filePathButton = new javax.swing.JButton();
        combatPanel = new javax.swing.JPanel();
        outputPane = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        newCharacterPanel = new javax.swing.JPanel();
        newCharacterLabel1 = new javax.swing.JLabel();
        newCharacterLabel2 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        dexLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        initLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        dexText = new javax.swing.JTextField();
        monButton = new javax.swing.JRadioButton();
        charButton = new javax.swing.JRadioButton();
        initText = new javax.swing.JTextField();
        finishButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        inputPlayerInitPanel = new javax.swing.JPanel();
        initTextEnterLabel = new javax.swing.JLabel();
        initTextEnter = new javax.swing.JTextField();
        acceptButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);

        backgroundPanel.setBackground(new java.awt.Color(102, 51, 255));

        controlPanel.setBackground(new java.awt.Color(102, 51, 255));
        controlPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        returnButton.setText("File");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton)
                    .addComponent(runButton)
                    .addComponent(exitButton)
                    .addComponent(returnButton))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(runButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(returnButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitButton)
                .addContainerGap())
        );

        outputPanel.setBackground(new java.awt.Color(255, 255, 255));
        outputPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        outputPanel.setLayout(new java.awt.CardLayout());

        filePathPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        filePathLabel.setText("Please enter your filepath beginning with C:/");

        titleLabel.setFont(new java.awt.Font("Old English Text MT", 0, 18)); // NOI18N
        titleLabel.setText("Initiative Tracker 1.0");

        filePathText.setToolTipText("Example: C:/users/Public/PublicDocuments");

        filePathButton.setText("Enter");
        filePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filePathPanelLayout = new javax.swing.GroupLayout(filePathPanel);
        filePathPanel.setLayout(filePathPanelLayout);
        filePathPanelLayout.setHorizontalGroup(
            filePathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filePathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filePathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(filePathText)
                        .addComponent(filePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(filePathButton))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        filePathPanelLayout.setVerticalGroup(
            filePathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(100, 100, 100)
                .addComponent(filePathLabel)
                .addGap(18, 18, 18)
                .addComponent(filePathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filePathButton)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        outputPanel.add(filePathPanel, "card2");

        combatPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        outputText.setEditable(false);
        outputText.setColumns(20);
        outputText.setRows(5);
        outputText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                outputTextKeyPressed(evt);
            }
        });
        outputPane.setViewportView(outputText);

        javax.swing.GroupLayout combatPanelLayout = new javax.swing.GroupLayout(combatPanel);
        combatPanel.setLayout(combatPanelLayout);
        combatPanelLayout.setHorizontalGroup(
            combatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );
        combatPanelLayout.setVerticalGroup(
            combatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputPane, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        outputPanel.add(combatPanel, "card3");

        newCharacterPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        newCharacterLabel1.setText("Enter your character name, dex, and type.");

        newCharacterLabel2.setText("Leave init blank if you want the machine to roll for you.");

        nameLabel.setText("Name:");

        dexLabel.setText("Dexterity:");

        typeLabel.setText("Type:");

        initLabel.setText("Initiative:");

        monButton.setText("Monster");
        monButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monButtonActionPerformed(evt);
            }
        });

        charButton.setText("Character");
        charButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charButtonActionPerformed(evt);
            }
        });

        initText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initTextActionPerformed(evt);
            }
        });

        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newCharacterPanelLayout = new javax.swing.GroupLayout(newCharacterPanel);
        newCharacterPanel.setLayout(newCharacterPanelLayout);
        newCharacterPanelLayout.setHorizontalGroup(
            newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCharacterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newCharacterLabel1)
                    .addComponent(newCharacterLabel2)
                    .addGroup(newCharacterPanelLayout.createSequentialGroup()
                        .addComponent(dexLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dexText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newCharacterPanelLayout.createSequentialGroup()
                        .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newCharacterPanelLayout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(newCharacterPanelLayout.createSequentialGroup()
                                .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(newCharacterPanelLayout.createSequentialGroup()
                                        .addComponent(typeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(monButton))
                                    .addGroup(newCharacterPanelLayout.createSequentialGroup()
                                        .addComponent(initLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(initText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(newCharacterPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                                        .addComponent(charButton))
                                    .addGroup(newCharacterPanelLayout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(finishButton)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newCharacterPanelLayout.setVerticalGroup(
            newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCharacterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newCharacterLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newCharacterLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dexLabel)
                    .addComponent(dexText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(monButton)
                    .addComponent(charButton))
                .addGap(23, 23, 23)
                .addGroup(newCharacterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initLabel)
                    .addComponent(initText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finishButton)
                    .addComponent(cancelButton))
                .addGap(23, 23, 23))
        );

        outputPanel.add(newCharacterPanel, "card3");

        inputPlayerInitPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        initTextEnterLabel.setText("Please input Player Name's initiative:");

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPlayerInitPanelLayout = new javax.swing.GroupLayout(inputPlayerInitPanel);
        inputPlayerInitPanel.setLayout(inputPlayerInitPanelLayout);
        inputPlayerInitPanelLayout.setHorizontalGroup(
            inputPlayerInitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPlayerInitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPlayerInitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPlayerInitPanelLayout.createSequentialGroup()
                        .addComponent(initTextEnterLabel)
                        .addGap(18, 18, 18)
                        .addComponent(initTextEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(acceptButton))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        inputPlayerInitPanelLayout.setVerticalGroup(
            inputPlayerInitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPlayerInitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPlayerInitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initTextEnterLabel)
                    .addComponent(initTextEnter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(acceptButton)
                .addContainerGap(198, Short.MAX_VALUE))
        );

        outputPanel.add(inputPlayerInitPanel, "card3");

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
//                        Collections.sort(addedBrawl);
//                        n = 0;
//                        for (n = 0; n < baseBrawl.size(); n++) {
//                            int ph = baseBrawl.get(n).getDex();
//                            System.out.println(Integer.toString(ph));
//                            String phl = baseBrawl.get(n).getName();
//                            System.out.println(phl);
//                            phl = baseBrawl.get(n).getType();
//                            System.out.println(phl);
//                            ph = baseBrawl.get(n).getInit();
//                            System.out.println(Integer.toString(ph));
//                            System.out.println("");
//                        }
//                        System.out.println("NEW LIST");
//                        n = 0;
//                        Collections.sort(old);
//                        for (n = 0; n < old.size(); n++) {
//                            int ph = old.get(n).getDex();
//                            System.out.println(Integer.toString(ph));
//                            String phl = old.get(n).getName();
//                            System.out.println(phl);
//                            phl = old.get(n).getType();
//                            System.out.println(phl);
//                            ph = old.get(n).getInit();
//                            System.out.println(Integer.toString(ph));
//                        }






//        if (filePathText.getText().equals("") ) {
//        }
//        else {
//            Combat combat = new Combat(filePath);
//            combatInit = true;
//                ArrayList<Combatant> brawl = new ArrayList<Combatant>();
//                if (j == 0) {
//                    brawl = combat.myCombatant();
//                    brawl = combat.myCombatantStored(combat.getTotal(), inits, names);
//                    if (newAdded == false)
//                        old = brawl;
//                    outputText.append("FIGHT!!!" + newline);
//                }
//                else {
//                    brawl = combat.myCombatant();
//                    brawl = combat.myCombatantStored(combat.getTotal(), inits, names);
//                    if (newAdded == false)
//                        old = brawl;
//                }
//                if (newAdded == true) {
//                    brawl = old;
//                    newAdded = false;
//                }
//                String out = "It is " + brawl.get(i).getName() + "'s turn!";
//                    outputText.append(out + newline);
//                out = brawl.get(i).getName() + " has an initiative of " + brawl.get(i).getInit();
//                    outputText.append(out + newline);
//                //int examp = combat.getTotal();
//                if (i >= combat.getTotal() - 1) {
//                    i = 0;
//                    outputText.append("TOP OF THE ROUND" + newline);
//                }
//                else
//                    i++;
//                j++;
//        }
        blank = 0;
        if (filePathText.getText().equals("") ) {
        }
        else {
            Combat combat = new Combat(filePath);
            combatInit = true;
                ArrayList<Combatant> baseBrawl = new ArrayList<Combatant>();
                baseBrawl = combat.myCombatant(initialized);
                int example2 = baseBrawl.size();
                baseBrawl = combat.myCombatantStored(combat.getTotal(), inits, names);
                example2 = baseBrawl.size();
                int finalTotal = combat.getTotal();
                if (j == 0) {
                    outputText.append("FIGHT!!!" + newline);
                }
                if (newAdded == true) {
                    ArrayList<Combatant> addedBrawl = new ArrayList<Combatant>();
                    newAdded = false;
                    try {
                        comFile = filePath + "/CombatantsTemp.txt";
                        monFile = filePath + "/MonsterTemp.txt";
                        charFile = filePath + "/CharactersTemp.txt";
                        BufferedReader r = new BufferedReader(new FileReader(comFile));
                        BufferedReader ch = new BufferedReader(new FileReader(charFile));
                        BufferedReader mo = new BufferedReader(new FileReader(monFile));
                        int newTotal = 0;
                        newTotal = combat.countTotal(comFile, charFile, monFile);
                        finalTotal = newTotal;
                        int n = 0;
                        Collections.sort(baseBrawl);
//                        phDex = old.getDex();
//                        phName = old.getName();
//                        phType = old.getType();
//                        phInit = old.getInit();
                        for (n = 0; n < newTotal; n++) {
//                            phDex = baseBrawl.get(n).getDex();
//                        phName = baseBrawl.get(n).getName();
//                        phType = baseBrawl.get(n).getType();
//                        phInit = baseBrawl.get(n).getInit();
                            if (baseBrawl.get(n).match(old.getDex(), old.getName(), old.getType(), old.getInit()))
                                newlyAdded = n;
                        }
//                        int n = 0;
//                        for (n = 0; n < newTotal; n++) {
//                            phDexString = r.readLine();
//                            phDex = Integer.parseInt(phDexString);
//                            phName = r.readLine();
//                            phType = r.readLine();
//                            phInitString = r.readLine();
//                            phInit = Integer.parseInt(phInitString);
//                            addedBrawl.add(new Combatant(phDex, phName, phType, phInit));
//                        }
//                        baseBrawl = addedBrawl;
                        r.close();
                        ch.close();
                        mo.close();
                    } catch (IOException e) {
                        System.out.print("Exception");
                    }
                }
                String out = "";
                    if (newlyAdded != - 1) {
                        if (baseBrawl.get(i).match(baseBrawl.get(newlyAdded).getDex(), 
                                                baseBrawl.get(newlyAdded).getName(), 
                                                baseBrawl.get(newlyAdded).getType(), 
                                                baseBrawl.get(newlyAdded).getInit())) {
                            //Wait till next round to add player to init
                            newlyAdded = -1;
                            newAdded = false;
                        }
                        else {
                            out = "It is " + baseBrawl.get(i).getName() + "'s turn!";
                            outputText.append(out + newline);
                            out = baseBrawl.get(i).getName() + " has an initiative of " + baseBrawl.get(i).getInit();
                            outputText.append(out + newline);
                        }
                    }
                    else {
                        out = "It is " + baseBrawl.get(i).getName() + "'s turn!";
                        outputText.append(out + newline);
                        out = baseBrawl.get(i).getName() + " has an initiative of " + baseBrawl.get(i).getInit();
                        outputText.append(out + newline);
                    }
                if (i >= finalTotal - 1) {
                    i = 0;
                    outputText.append("TOP OF THE ROUND" + newline);
                }
                else
                    i++;
                initialized++;
                j++;
        }
    }                                         

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        this.dispose();
    }                                          

    private void filePathButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if (filePathText.getText().equals("") ) {
        }
        else {
            filePath = filePathText.getText();
            filePath = filePathText.getText();
            Combat combat = new Combat(filePath);
            ArrayList<Combatant> brawl = new ArrayList<Combatant>();
            brawl = combat.myCombatant(initialized);
            if (brawl.isEmpty()) {
                blank = 1;
                //removing panel
                outputPanel.removeAll();
                outputPanel.repaint();
                outputPanel.revalidate();
                //adding panels
                outputPanel.add(newCharacterPanel);
                outputPanel.repaint();
                outputPanel.revalidate();
            }
            else {
                for (i = 0; i < combat.getTotal(); i++) {
                    if (brawl.get(i).getType().equals("character")) {
                        names.add(brawl.get(i).getName());
                        //inits.add(brawl.get(i).getInit());
                    }
                }
                combatInit = true;
                //removing panel
                outputPanel.removeAll();
                outputPanel.repaint();
                outputPanel.revalidate();

                if (names.isEmpty()) {
                    //adding panels
                    outputPanel.add(combatPanel);
                    outputPanel.repaint();
                    outputPanel.revalidate();
                } else {
                    //adding panels
                    initTextEnterLabel.setText("Please input " + names.get(0) + "'s initiative:");
                    outputPanel.add(inputPlayerInitPanel);
                    outputPanel.repaint();
                    outputPanel.revalidate();
                }
                i = 0;
                j = 0;
                initialized = 0;
            }
        }
        
    }                                              

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        //removing panel
        outputPanel.removeAll();
        outputPanel.repaint();
        outputPanel.revalidate();
        
        //adding panels
        outputPanel.add(filePathPanel);
        outputPanel.repaint();
        outputPanel.revalidate();
    }                                            

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (combatInit = true) {
            //removing panel
            outputPanel.removeAll();
            outputPanel.repaint();
            outputPanel.revalidate();
        
            //adding panels
            outputPanel.add(newCharacterPanel);
            outputPanel.repaint();
            outputPanel.revalidate();
        }
    }                                         

    private void monButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (monButton.isSelected() == true && charButton.isSelected() == true) {
            charButton.doClick();
        }
    }                                         

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
            if (combatInit = true && (monButton.isSelected() == true || charButton.isSelected() == true) 
                    && isNumeric(dexText.getText()) == true && !nameText.getText().equals("") &&
                    (initText.getText().equals("") || isNumeric(initText.getText()) == true)) {
                Combat combat2 = new Combat(filePath);
                Random rando = new Random();
                String dex = "";
                String init = "";
                String name = "";
                String type = "";
                if (monButton.isSelected() == true) {
                    type = "monster";
                }
                else if (charButton.isSelected() == true) {
                    type = "character";
                }
                dex = dexText.getText();
                init = initText.getText();
                if (init.equals("")) {
                    init = Integer.toString(((Integer.parseInt(dex) - 10)/2) + 1 + rando.nextInt(20));
                }
                name = nameText.getText();
                old = new Combatant(Integer.parseInt(dex), name, type, combat2.newCharacter(dex, name, type, init));
                //combat2.newCharacter(dex, name, type, init);
                newAdded = true;
                //removing panel
                blank++;
                if (blank == 3 || blank < 2)
                {
                    blank = 0;
                    outputPanel.removeAll();
                    outputPanel.repaint();
                    outputPanel.revalidate();
        
                    //adding panels
                    outputPanel.add(combatPanel);
                    outputPanel.repaint();
                    outputPanel.revalidate();
                }
            }
    }                                            

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
            //removing panel
            outputPanel.removeAll();
            outputPanel.repaint();
            outputPanel.revalidate();
        
            //adding panels
            outputPanel.add(combatPanel);
            outputPanel.repaint();
            outputPanel.revalidate();
    }                                            

    private void charButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (monButton.isSelected() == true && charButton.isSelected() == true) {
            monButton.doClick();
        }
    }                                          

    private void outputTextKeyPressed(java.awt.event.KeyEvent evt) {                                      
        //i++;
        clicked = true;
        runButton.doClick();
    }                                     

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
       if (!initTextEnter.getText().equals("") && isNumeric(initTextEnter.getText()) == true) {
            if (i < names.size() - 1) {
                inits.add(Integer.parseInt(initTextEnter.getText()));
                initTextEnter.setText("");
                i++;
                initTextEnterLabel.setText("Please input " + names.get(i) + "'s initiative:");
            }
            else if (i < names.size()) {
                inits.add(Integer.parseInt(initTextEnter.getText()));
                combatInit = true;
                i = 0;
                //removing panel
                outputPanel.removeAll();
                outputPanel.repaint();
                outputPanel.revalidate();
        
                //adding panels
                outputPanel.add(combatPanel);
                outputPanel.repaint();
                outputPanel.revalidate();
            }
        }
    }                                            

    private void initTextActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton charButton;
    private javax.swing.JPanel combatPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel dexLabel;
    private javax.swing.JTextField dexText;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton filePathButton;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JPanel filePathPanel;
    private javax.swing.JTextField filePathText;
    private javax.swing.JButton finishButton;
    private javax.swing.JLabel initLabel;
    private javax.swing.JTextField initText;
    private javax.swing.JTextField initTextEnter;
    private javax.swing.JLabel initTextEnterLabel;
    private javax.swing.JPanel inputPlayerInitPanel;
    private javax.swing.JRadioButton monButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel newCharacterLabel1;
    private javax.swing.JLabel newCharacterLabel2;
    private javax.swing.JPanel newCharacterPanel;
    private javax.swing.JScrollPane outputPane;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JTextArea outputText;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton runButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration                   
}
